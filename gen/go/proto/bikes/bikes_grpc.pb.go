// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/bikes/bikes.proto

package bikes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BikesAPI_ListBikes_FullMethodName       = "/bikerental.grpc.bikes.v1.BikesAPI/ListBikes"
	BikesAPI_GetBike_FullMethodName         = "/bikerental.grpc.bikes.v1.BikesAPI/GetBike"
	BikesAPI_GetBikes_FullMethodName        = "/bikerental.grpc.bikes.v1.BikesAPI/GetBikes"
	BikesAPI_GetBikesByTYPE_FullMethodName  = "/bikerental.grpc.bikes.v1.BikesAPI/GetBikesByTYPE"
	BikesAPI_GetBikesByMAKE_FullMethodName  = "/bikerental.grpc.bikes.v1.BikesAPI/GetBikesByMAKE"
	BikesAPI_GetBikesByOWNER_FullMethodName = "/bikerental.grpc.bikes.v1.BikesAPI/GetBikesByOWNER"
	BikesAPI_AddBike_FullMethodName         = "/bikerental.grpc.bikes.v1.BikesAPI/AddBike"
	BikesAPI_DeleteBike_FullMethodName      = "/bikerental.grpc.bikes.v1.BikesAPI/DeleteBike"
)

// BikesAPIClient is the client API for BikesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// API for managing bikes
type BikesAPIClient interface {
	// Get all bikes
	ListBikes(ctx context.Context, in *ListBikesRequest, opts ...grpc.CallOption) (*ListBikesResponse, error)
	// Get bike by id
	GetBike(ctx context.Context, in *GetBikeRequest, opts ...grpc.CallOption) (*GetBikeResponse, error)
	// Get bikes by ids
	GetBikes(ctx context.Context, in *GetBikesRequest, opts ...grpc.CallOption) (*GetBikesResponse, error)
	// Get bikes by type
	GetBikesByTYPE(ctx context.Context, in *GetBikesByTYPERequest, opts ...grpc.CallOption) (*GetBikeByTYPEResponse, error)
	// Get bikes by make
	GetBikesByMAKE(ctx context.Context, in *GetBikesByMAKERequest, opts ...grpc.CallOption) (*GetBikesByMAKEResponse, error)
	// Get bikes by owner_name
	GetBikesByOWNER(ctx context.Context, in *GetBikesByOWNERRequest, opts ...grpc.CallOption) (*GetBikesByOWNERResponse, error)
	// Add new bike
	AddBike(ctx context.Context, in *AddBikeRequest, opts ...grpc.CallOption) (*AddBikeResponse, error)
	// Delete bike
	DeleteBike(ctx context.Context, in *DeleteBikeRequest, opts ...grpc.CallOption) (*DeleteBikeResponse, error)
}

type bikesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBikesAPIClient(cc grpc.ClientConnInterface) BikesAPIClient {
	return &bikesAPIClient{cc}
}

func (c *bikesAPIClient) ListBikes(ctx context.Context, in *ListBikesRequest, opts ...grpc.CallOption) (*ListBikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBikesResponse)
	err := c.cc.Invoke(ctx, BikesAPI_ListBikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) GetBike(ctx context.Context, in *GetBikeRequest, opts ...grpc.CallOption) (*GetBikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBikeResponse)
	err := c.cc.Invoke(ctx, BikesAPI_GetBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) GetBikes(ctx context.Context, in *GetBikesRequest, opts ...grpc.CallOption) (*GetBikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBikesResponse)
	err := c.cc.Invoke(ctx, BikesAPI_GetBikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) GetBikesByTYPE(ctx context.Context, in *GetBikesByTYPERequest, opts ...grpc.CallOption) (*GetBikeByTYPEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBikeByTYPEResponse)
	err := c.cc.Invoke(ctx, BikesAPI_GetBikesByTYPE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) GetBikesByMAKE(ctx context.Context, in *GetBikesByMAKERequest, opts ...grpc.CallOption) (*GetBikesByMAKEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBikesByMAKEResponse)
	err := c.cc.Invoke(ctx, BikesAPI_GetBikesByMAKE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) GetBikesByOWNER(ctx context.Context, in *GetBikesByOWNERRequest, opts ...grpc.CallOption) (*GetBikesByOWNERResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBikesByOWNERResponse)
	err := c.cc.Invoke(ctx, BikesAPI_GetBikesByOWNER_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) AddBike(ctx context.Context, in *AddBikeRequest, opts ...grpc.CallOption) (*AddBikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBikeResponse)
	err := c.cc.Invoke(ctx, BikesAPI_AddBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikesAPIClient) DeleteBike(ctx context.Context, in *DeleteBikeRequest, opts ...grpc.CallOption) (*DeleteBikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBikeResponse)
	err := c.cc.Invoke(ctx, BikesAPI_DeleteBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BikesAPIServer is the server API for BikesAPI service.
// All implementations must embed UnimplementedBikesAPIServer
// for forward compatibility.
//
// API for managing bikes
type BikesAPIServer interface {
	// Get all bikes
	ListBikes(context.Context, *ListBikesRequest) (*ListBikesResponse, error)
	// Get bike by id
	GetBike(context.Context, *GetBikeRequest) (*GetBikeResponse, error)
	// Get bikes by ids
	GetBikes(context.Context, *GetBikesRequest) (*GetBikesResponse, error)
	// Get bikes by type
	GetBikesByTYPE(context.Context, *GetBikesByTYPERequest) (*GetBikeByTYPEResponse, error)
	// Get bikes by make
	GetBikesByMAKE(context.Context, *GetBikesByMAKERequest) (*GetBikesByMAKEResponse, error)
	// Get bikes by owner_name
	GetBikesByOWNER(context.Context, *GetBikesByOWNERRequest) (*GetBikesByOWNERResponse, error)
	// Add new bike
	AddBike(context.Context, *AddBikeRequest) (*AddBikeResponse, error)
	// Delete bike
	DeleteBike(context.Context, *DeleteBikeRequest) (*DeleteBikeResponse, error)
	mustEmbedUnimplementedBikesAPIServer()
}

// UnimplementedBikesAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBikesAPIServer struct{}

func (UnimplementedBikesAPIServer) ListBikes(context.Context, *ListBikesRequest) (*ListBikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBikes not implemented")
}
func (UnimplementedBikesAPIServer) GetBike(context.Context, *GetBikeRequest) (*GetBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBike not implemented")
}
func (UnimplementedBikesAPIServer) GetBikes(context.Context, *GetBikesRequest) (*GetBikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikes not implemented")
}
func (UnimplementedBikesAPIServer) GetBikesByTYPE(context.Context, *GetBikesByTYPERequest) (*GetBikeByTYPEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikesByTYPE not implemented")
}
func (UnimplementedBikesAPIServer) GetBikesByMAKE(context.Context, *GetBikesByMAKERequest) (*GetBikesByMAKEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikesByMAKE not implemented")
}
func (UnimplementedBikesAPIServer) GetBikesByOWNER(context.Context, *GetBikesByOWNERRequest) (*GetBikesByOWNERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikesByOWNER not implemented")
}
func (UnimplementedBikesAPIServer) AddBike(context.Context, *AddBikeRequest) (*AddBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBike not implemented")
}
func (UnimplementedBikesAPIServer) DeleteBike(context.Context, *DeleteBikeRequest) (*DeleteBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBike not implemented")
}
func (UnimplementedBikesAPIServer) mustEmbedUnimplementedBikesAPIServer() {}
func (UnimplementedBikesAPIServer) testEmbeddedByValue()                  {}

// UnsafeBikesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BikesAPIServer will
// result in compilation errors.
type UnsafeBikesAPIServer interface {
	mustEmbedUnimplementedBikesAPIServer()
}

func RegisterBikesAPIServer(s grpc.ServiceRegistrar, srv BikesAPIServer) {
	// If the following call pancis, it indicates UnimplementedBikesAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BikesAPI_ServiceDesc, srv)
}

func _BikesAPI_ListBikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).ListBikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_ListBikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).ListBikes(ctx, req.(*ListBikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_GetBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).GetBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_GetBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).GetBike(ctx, req.(*GetBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_GetBikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).GetBikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_GetBikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).GetBikes(ctx, req.(*GetBikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_GetBikesByTYPE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikesByTYPERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).GetBikesByTYPE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_GetBikesByTYPE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).GetBikesByTYPE(ctx, req.(*GetBikesByTYPERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_GetBikesByMAKE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikesByMAKERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).GetBikesByMAKE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_GetBikesByMAKE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).GetBikesByMAKE(ctx, req.(*GetBikesByMAKERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_GetBikesByOWNER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikesByOWNERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).GetBikesByOWNER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_GetBikesByOWNER_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).GetBikesByOWNER(ctx, req.(*GetBikesByOWNERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_AddBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).AddBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_AddBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).AddBike(ctx, req.(*AddBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikesAPI_DeleteBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikesAPIServer).DeleteBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikesAPI_DeleteBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikesAPIServer).DeleteBike(ctx, req.(*DeleteBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BikesAPI_ServiceDesc is the grpc.ServiceDesc for BikesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BikesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bikerental.grpc.bikes.v1.BikesAPI",
	HandlerType: (*BikesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBikes",
			Handler:    _BikesAPI_ListBikes_Handler,
		},
		{
			MethodName: "GetBike",
			Handler:    _BikesAPI_GetBike_Handler,
		},
		{
			MethodName: "GetBikes",
			Handler:    _BikesAPI_GetBikes_Handler,
		},
		{
			MethodName: "GetBikesByTYPE",
			Handler:    _BikesAPI_GetBikesByTYPE_Handler,
		},
		{
			MethodName: "GetBikesByMAKE",
			Handler:    _BikesAPI_GetBikesByMAKE_Handler,
		},
		{
			MethodName: "GetBikesByOWNER",
			Handler:    _BikesAPI_GetBikesByOWNER_Handler,
		},
		{
			MethodName: "AddBike",
			Handler:    _BikesAPI_AddBike_Handler,
		},
		{
			MethodName: "DeleteBike",
			Handler:    _BikesAPI_DeleteBike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bikes/bikes.proto",
}
