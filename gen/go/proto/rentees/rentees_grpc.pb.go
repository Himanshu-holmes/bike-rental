// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/rentees/rentees.proto

package rentees

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RenteesAPI_ListRentees_FullMethodName           = "/bikerental.grpc.rentees.v1.RenteesAPI/ListRentees"
	RenteesAPI_GetRenteeByBikeId_FullMethodName     = "/bikerental.grpc.rentees.v1.RenteesAPI/GetRenteeByBikeId"
	RenteesAPI_GetRenteesByBikeTYPE_FullMethodName  = "/bikerental.grpc.rentees.v1.RenteesAPI/GetRenteesByBikeTYPE"
	RenteesAPI_GetRenteesByBikeMAKE_FullMethodName  = "/bikerental.grpc.rentees.v1.RenteesAPI/GetRenteesByBikeMAKE"
	RenteesAPI_GetRenteesByBikeOWNER_FullMethodName = "/bikerental.grpc.rentees.v1.RenteesAPI/GetRenteesByBikeOWNER"
	RenteesAPI_GetRentee_FullMethodName             = "/bikerental.grpc.rentees.v1.RenteesAPI/GetRentee"
	RenteesAPI_AddRentee_FullMethodName             = "/bikerental.grpc.rentees.v1.RenteesAPI/AddRentee"
	RenteesAPI_UpdateRentee_FullMethodName          = "/bikerental.grpc.rentees.v1.RenteesAPI/UpdateRentee"
)

// RenteesAPIClient is the client API for RenteesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// API for managing rentees
type RenteesAPIClient interface {
	// Get all rentees
	ListRentees(ctx context.Context, in *ListRenteesRequest, opts ...grpc.CallOption) (*ListRenteesResponse, error)
	// Get rentee by bike id
	GetRenteeByBikeId(ctx context.Context, in *GetRenteeByBikeIdRequest, opts ...grpc.CallOption) (*GetRenteeByBikeIdResponse, error)
	// Get rentee by bike type
	GetRenteesByBikeTYPE(ctx context.Context, in *GetRenteesByBikeTYPERequest, opts ...grpc.CallOption) (*GetRenteeByBikeTYPEResponse, error)
	// Get rentee by bike make
	GetRenteesByBikeMAKE(ctx context.Context, in *GetRenteeByBikeMAKERequest, opts ...grpc.CallOption) (*GetRenteeByBikeMAKEResponse, error)
	// Get rentee by bike owner
	GetRenteesByBikeOWNER(ctx context.Context, in *GetRenteeByBikeOWNERRequest, opts ...grpc.CallOption) (*GetRenteeByBikeOWNERResponse, error)
	// Get rentee by id
	GetRentee(ctx context.Context, in *GetRenteeRequest, opts ...grpc.CallOption) (*GetRenteeResponse, error)
	// Add new rentee
	AddRentee(ctx context.Context, in *AddRenteeRequest, opts ...grpc.CallOption) (*AddRenteeResponse, error)
	// Update rentee
	UpdateRentee(ctx context.Context, in *UpdateRenteeRequest, opts ...grpc.CallOption) (*UpdateRenteeResponse, error)
}

type renteesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRenteesAPIClient(cc grpc.ClientConnInterface) RenteesAPIClient {
	return &renteesAPIClient{cc}
}

func (c *renteesAPIClient) ListRentees(ctx context.Context, in *ListRenteesRequest, opts ...grpc.CallOption) (*ListRenteesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRenteesResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_ListRentees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) GetRenteeByBikeId(ctx context.Context, in *GetRenteeByBikeIdRequest, opts ...grpc.CallOption) (*GetRenteeByBikeIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRenteeByBikeIdResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_GetRenteeByBikeId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) GetRenteesByBikeTYPE(ctx context.Context, in *GetRenteesByBikeTYPERequest, opts ...grpc.CallOption) (*GetRenteeByBikeTYPEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRenteeByBikeTYPEResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_GetRenteesByBikeTYPE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) GetRenteesByBikeMAKE(ctx context.Context, in *GetRenteeByBikeMAKERequest, opts ...grpc.CallOption) (*GetRenteeByBikeMAKEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRenteeByBikeMAKEResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_GetRenteesByBikeMAKE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) GetRenteesByBikeOWNER(ctx context.Context, in *GetRenteeByBikeOWNERRequest, opts ...grpc.CallOption) (*GetRenteeByBikeOWNERResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRenteeByBikeOWNERResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_GetRenteesByBikeOWNER_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) GetRentee(ctx context.Context, in *GetRenteeRequest, opts ...grpc.CallOption) (*GetRenteeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRenteeResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_GetRentee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) AddRentee(ctx context.Context, in *AddRenteeRequest, opts ...grpc.CallOption) (*AddRenteeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRenteeResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_AddRentee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renteesAPIClient) UpdateRentee(ctx context.Context, in *UpdateRenteeRequest, opts ...grpc.CallOption) (*UpdateRenteeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRenteeResponse)
	err := c.cc.Invoke(ctx, RenteesAPI_UpdateRentee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RenteesAPIServer is the server API for RenteesAPI service.
// All implementations must embed UnimplementedRenteesAPIServer
// for forward compatibility.
//
// API for managing rentees
type RenteesAPIServer interface {
	// Get all rentees
	ListRentees(context.Context, *ListRenteesRequest) (*ListRenteesResponse, error)
	// Get rentee by bike id
	GetRenteeByBikeId(context.Context, *GetRenteeByBikeIdRequest) (*GetRenteeByBikeIdResponse, error)
	// Get rentee by bike type
	GetRenteesByBikeTYPE(context.Context, *GetRenteesByBikeTYPERequest) (*GetRenteeByBikeTYPEResponse, error)
	// Get rentee by bike make
	GetRenteesByBikeMAKE(context.Context, *GetRenteeByBikeMAKERequest) (*GetRenteeByBikeMAKEResponse, error)
	// Get rentee by bike owner
	GetRenteesByBikeOWNER(context.Context, *GetRenteeByBikeOWNERRequest) (*GetRenteeByBikeOWNERResponse, error)
	// Get rentee by id
	GetRentee(context.Context, *GetRenteeRequest) (*GetRenteeResponse, error)
	// Add new rentee
	AddRentee(context.Context, *AddRenteeRequest) (*AddRenteeResponse, error)
	// Update rentee
	UpdateRentee(context.Context, *UpdateRenteeRequest) (*UpdateRenteeResponse, error)
	mustEmbedUnimplementedRenteesAPIServer()
}

// UnimplementedRenteesAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRenteesAPIServer struct{}

func (UnimplementedRenteesAPIServer) ListRentees(context.Context, *ListRenteesRequest) (*ListRenteesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRentees not implemented")
}
func (UnimplementedRenteesAPIServer) GetRenteeByBikeId(context.Context, *GetRenteeByBikeIdRequest) (*GetRenteeByBikeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenteeByBikeId not implemented")
}
func (UnimplementedRenteesAPIServer) GetRenteesByBikeTYPE(context.Context, *GetRenteesByBikeTYPERequest) (*GetRenteeByBikeTYPEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenteesByBikeTYPE not implemented")
}
func (UnimplementedRenteesAPIServer) GetRenteesByBikeMAKE(context.Context, *GetRenteeByBikeMAKERequest) (*GetRenteeByBikeMAKEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenteesByBikeMAKE not implemented")
}
func (UnimplementedRenteesAPIServer) GetRenteesByBikeOWNER(context.Context, *GetRenteeByBikeOWNERRequest) (*GetRenteeByBikeOWNERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenteesByBikeOWNER not implemented")
}
func (UnimplementedRenteesAPIServer) GetRentee(context.Context, *GetRenteeRequest) (*GetRenteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRentee not implemented")
}
func (UnimplementedRenteesAPIServer) AddRentee(context.Context, *AddRenteeRequest) (*AddRenteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRentee not implemented")
}
func (UnimplementedRenteesAPIServer) UpdateRentee(context.Context, *UpdateRenteeRequest) (*UpdateRenteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRentee not implemented")
}
func (UnimplementedRenteesAPIServer) mustEmbedUnimplementedRenteesAPIServer() {}
func (UnimplementedRenteesAPIServer) testEmbeddedByValue()                    {}

// UnsafeRenteesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RenteesAPIServer will
// result in compilation errors.
type UnsafeRenteesAPIServer interface {
	mustEmbedUnimplementedRenteesAPIServer()
}

func RegisterRenteesAPIServer(s grpc.ServiceRegistrar, srv RenteesAPIServer) {
	// If the following call pancis, it indicates UnimplementedRenteesAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RenteesAPI_ServiceDesc, srv)
}

func _RenteesAPI_ListRentees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRenteesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).ListRentees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_ListRentees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).ListRentees(ctx, req.(*ListRenteesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_GetRenteeByBikeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenteeByBikeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).GetRenteeByBikeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_GetRenteeByBikeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).GetRenteeByBikeId(ctx, req.(*GetRenteeByBikeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_GetRenteesByBikeTYPE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenteesByBikeTYPERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).GetRenteesByBikeTYPE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_GetRenteesByBikeTYPE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).GetRenteesByBikeTYPE(ctx, req.(*GetRenteesByBikeTYPERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_GetRenteesByBikeMAKE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenteeByBikeMAKERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).GetRenteesByBikeMAKE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_GetRenteesByBikeMAKE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).GetRenteesByBikeMAKE(ctx, req.(*GetRenteeByBikeMAKERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_GetRenteesByBikeOWNER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenteeByBikeOWNERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).GetRenteesByBikeOWNER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_GetRenteesByBikeOWNER_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).GetRenteesByBikeOWNER(ctx, req.(*GetRenteeByBikeOWNERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_GetRentee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).GetRentee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_GetRentee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).GetRentee(ctx, req.(*GetRenteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_AddRentee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRenteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).AddRentee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_AddRentee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).AddRentee(ctx, req.(*AddRenteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenteesAPI_UpdateRentee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRenteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenteesAPIServer).UpdateRentee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenteesAPI_UpdateRentee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenteesAPIServer).UpdateRentee(ctx, req.(*UpdateRenteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RenteesAPI_ServiceDesc is the grpc.ServiceDesc for RenteesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RenteesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bikerental.grpc.rentees.v1.RenteesAPI",
	HandlerType: (*RenteesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRentees",
			Handler:    _RenteesAPI_ListRentees_Handler,
		},
		{
			MethodName: "GetRenteeByBikeId",
			Handler:    _RenteesAPI_GetRenteeByBikeId_Handler,
		},
		{
			MethodName: "GetRenteesByBikeTYPE",
			Handler:    _RenteesAPI_GetRenteesByBikeTYPE_Handler,
		},
		{
			MethodName: "GetRenteesByBikeMAKE",
			Handler:    _RenteesAPI_GetRenteesByBikeMAKE_Handler,
		},
		{
			MethodName: "GetRenteesByBikeOWNER",
			Handler:    _RenteesAPI_GetRenteesByBikeOWNER_Handler,
		},
		{
			MethodName: "GetRentee",
			Handler:    _RenteesAPI_GetRentee_Handler,
		},
		{
			MethodName: "AddRentee",
			Handler:    _RenteesAPI_AddRentee_Handler,
		},
		{
			MethodName: "UpdateRentee",
			Handler:    _RenteesAPI_UpdateRentee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rentees/rentees.proto",
}
